# -*- coding: utf-8 -*-
"""[Jok] Klasifikasi Diabetes Decision Tree

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fMHnvEfO5Bkfz8AjqKBfoU9nJ0P7FiIj

# Project Objective

- Klasifikasi diabetes dengan algoritma Decision Tree
- Outpunya apakah terkena diabetes atau non-diabetes
- Evaluasi akurasi model Decision Tree dalam klasifikasi diabetes

# Import Library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report

from imblearn.over_sampling import SMOTE
from sklearn.tree import plot_tree

"""# Load Dataset"""

df = pd.read_csv('/content/diabetes.csv')

"""## Asessing Dataset"""

df

df.columns

df.info()

# Cek missing value
df.isnull().sum()

# Cek duplikat
df.duplicated().sum()

"""# EDA"""

df.describe()

df['Outcome'].value_counts()

"""## Find Correlation"""

df.corr()

dfcorr = df.corr()
fig, ax = plt.subplots(figsize=(10,10))
sns.heatmap(dfcorr, annot=True, annot_kws={"size":12}, cmap="coolwarm")
plt.title("Correlation matrix")
plt.show()

"""# PreProcessing

"""

# feature variables
X = df.drop(['Outcome'], axis=1)

#target variable
y=df.Outcome

# Split data 70:30
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)

"""## SMOTE to balance the outcome classes"""

# Apply SMOTE to balance the classes
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X_train, y_train)

"""# Modelling"""

# Create Decision Tree classifer object
model = DecisionTreeClassifier()

# Train Decision Tree Classifer
model = model.fit(X_train,y_train)

#Predict the response for test dataset
y_pred = model.predict(X_test)

# Show model accuracy
print("Accuracy:",accuracy_score(y_test, y_pred)*100)

"""## Fine Tuning"""

# Create a parameter grid
param_grid = {
    'max_depth': [3, 5, 7, 10],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'class_weight': [None, 'balanced']
}

# Initialize the Decision Tree classifier
dt = DecisionTreeClassifier(criterion="entropy")

# Initialize GridSearchCV
grid_search = GridSearchCV(estimator=dt, param_grid=param_grid, cv=5, scoring='f1')

# Fit GridSearchCV
grid_search.fit(X_train, y_train)

# Print the best parameters found by GridSearchCV
print(f"Best parameters: {grid_search.best_params_}")

# Use the best model
best_model = grid_search.best_estimator_

# Make predictions on the test set
y_pred = best_model.predict(X_test)

# Model Accuracy
print("Accuracy:",accuracy_score(y_test, y_pred)*100)

"""# Evaluation"""

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

# Print evaluation metrics
print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1-Score: {f1:.4f}")
print("\nClassification Report:\n", classification_rep)

"""# Deployment"""

# Function to make a prediction based on user input
def make_prediction(model, input_data):
    # Convert input data to a NumPy array and reshape it for prediction
    input_array = np.array(input_data).reshape(1, -1)

    # Make a prediction
    prediction = model.predict(input_array)

    # Return the prediction
    return prediction[0]

"""## Input From User"""

# Get user input
print("Please enter the following values:")
pregnancies = int(input("Pregnancies: "))
glucose = int(input("Glucose: "))
blood_pressure = int(input("BloodPressure: "))
skin_thickness = int(input("SkinThickness: "))
insulin = int(input("Insulin: "))
bmi = float(input("BMI: "))  # Accepting BMI as float
diabetes_pedigree_function = float(input("DiabetesPedigreeFunction: "))  # Accepting DiabetesPedigreeFunction as float
age = int(input("Age: "))

# Create a list with the input values
input_data = [pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi, diabetes_pedigree_function, age]

# Make a prediction
prediction = make_prediction(model, input_data)
print(f"The predicted class for the input data is: {'Diabetic' if prediction == 1 else 'Non-Diabetic'}")

"""## Input From Code"""

# Example user input
user_input = {
    'Pregnancies': 8,
    'Glucose': 183,
    'BloodPressure': 64,
    'SkinThickness': 0,
    'Insulin': 0,
    'BMI': 23.3,  # Float value
    'DiabetesPedigreeFunction': 0.672,  # Float value
    'Age': 32
}

# Extract input values in the correct order
input_data = [user_input['Pregnancies'], user_input['Glucose'], user_input['BloodPressure'],
              user_input['SkinThickness'], user_input['Insulin'], user_input['BMI'],
              user_input['DiabetesPedigreeFunction'], user_input['Age']]

# Make a prediction
prediction = make_prediction(model, input_data)
print(f"The predicted class for the input data is: {prediction}")